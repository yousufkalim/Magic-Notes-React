{"version":3,"sources":["actions.js","Components/Nav.jsx","Components/Input.jsx","Components/Cards.jsx","Components/Update.jsx","Components/Notes.jsx","App.jsx","index.js"],"names":["handleInput","e","setNote","prev","target","name","value","handleSearch","inputVal","toLowerCase","noteCard","document","getElementsByClassName","Array","from","forEach","element","titleTxt","getElementsByTagName","innerText","noteTxt","includes","style","display","handlePinned","id","handleReload","axios","patch","then","catch","err","console","log","Nav","className","to","type","placeholder","onChange","Input","props","useState","title","note","error","setError","expand","setExpand","onSubmit","preventDefault","post","withCredentials","data","handleSubmit","border","cols","rows","onClick","Button","Cards","Fragment","pinned","visibility","handleUpdateStatus","delete","useEffect","update","setUpdate","put","status","getElementById","handleUpdate","Notes","card","setCard","reload","setReload","get","res","reverse","fetch","filter","others","all","i","length","Update","map","index","_id","App","exact","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.33e16a54.chunk.js","sourcesContent":["import axios from \"axios\";\n\n/*\n===============\nPost Request\n===============\n*/\n\n//Handel input\nfunction handleInput(e, setNote) {\n\tsetNote((prev) => {\n\t\treturn {\n\t\t\t...prev,\n\t\t\t[e.target.name]: e.target.value,\n\t\t};\n\t});\n}\n\n//Handle Submit\nfunction handleSubmit(note, setNote, setError, handleReload, e) {\n\te.preventDefault();\n\taxios\n\t\t.post(\"http://localhost:5000/notes\", {\n\t\t\twithCredentials: true,\n\t\t\tdata: note,\n\t\t})\n\t\t.then(() => {\n\t\t\thandleReload();\n\t\t\tsetNote({ title: \"\", note: \"\" });\n\t\t\tsetError(\"\");\n\t\t})\n\t\t.catch((err) => {\n\t\t\tsetError(\"Note Cannot be empty\");\n\t\t});\n}\n\n//Handle Update\nfunction handleUpdate(id, note, setError, handleReload, setUpdate, e) {\n\te.preventDefault();\n\taxios\n\t\t.put(`http://localhost:5000/notes/${id}`, {\n\t\t\twithCredentials: true,\n\t\t\tdata: note,\n\t\t})\n\t\t.then(() => {\n\t\t\thandleReload();\n\t\t\tsetUpdate({\n\t\t\t\tstatus: 0,\n\t\t\t\tid: \"\",\n\t\t\t\ttitle: \"\",\n\t\t\t\tnote: \"\",\n\t\t\t});\n\t\t\t//This will set back the property display of note to inline-block\n\t\t\tdocument.getElementById(id).style.display = \"inline-block\";\n\t\t})\n\t\t.catch(() => {\n\t\t\tsetError(\"Note Cannot be empty\");\n\t\t});\n}\n\n/*\n=================\nFetch Request\n=================\n*/\n\nfunction fetch(setCard) {\n\taxios\n\t\t.get(\"http://localhost:5000/notes\")\n\t\t//Reversing the array to sort note by date added\n\t\t.then((res) => setCard([...res.data.reverse()]))\n\t\t.catch((err) => console.log(err));\n}\n\n/*\n================\nDelete Request\n================\n*/\n\nfunction handleDelete(id, handleReload) {\n\taxios\n\t\t.delete(`http://localhost:5000/notes/${id}`)\n\t\t.then(() => handleReload())\n\t\t.catch((err) => console.log(err));\n}\n\n/*\n=================\nHandle Search\n=================\n*/\n\nfunction handleSearch(e) {\n\t//Getting Value from input element\n\tlet inputVal = e.target.value.toLowerCase();\n\n\t//Getting all notes from page\n\tlet noteCard = document.getElementsByClassName(\"card\");\n\n\t//forEach function to search\n\tArray.from(noteCard).forEach((element) => {\n\t\t//Getting note title\n\t\tlet titleTxt = element\n\t\t\t.getElementsByTagName(\"h2\")[0]\n\t\t\t.innerText.toLowerCase();\n\n\t\t//Getting note\n\t\tlet noteTxt = element\n\t\t\t.getElementsByTagName(\"p\")[0]\n\t\t\t.innerText.toLowerCase();\n\n\t\t//Searching\n\t\tif (titleTxt.includes(inputVal) || noteTxt.includes(inputVal)) {\n\t\t\telement.style.display = \"inline-block\";\n\t\t} else {\n\t\t\telement.style.display = \"none\";\n\t\t}\n\t});\n}\n\n/*\n==================\nHandle Pinned\n==================\n*/\n\nfunction handlePinned(id, handleReload) {\n\taxios\n\t\t.patch(`http://localhost:5000/notes/${id}`)\n\t\t.then(() => {\n\t\t\thandleReload();\n\t\t})\n\t\t.catch((err) => console.log(err));\n}\n\n/*\n====================\nFunctions Export\n====================\n*/\n\nexport {\n\thandleInput,\n\thandleSubmit,\n\thandleUpdate,\n\tfetch,\n\thandleDelete,\n\thandleSearch,\n\thandlePinned,\n};\n","//init\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { handleSearch } from \"../actions\";\n\n//Component\nfunction Nav() {\n\treturn (\n\t\t<nav>\n\t\t\t<div className=\"logo\">\n\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t<span>Magic Notes</span>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<div className=\"search\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tid=\"search\"\n\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\tonChange={handleSearch}\n\t\t\t\t/>\n\t\t\t\t{/* <Link to=\"/logout\">Logout</Link> */}\n\t\t\t</div>\n\t\t</nav>\n\t);\n}\n\n//Export\nexport default Nav;\n","import React, { useState } from \"react\";\nimport { handleInput, handleSubmit } from \"../actions\";\n\n//Material Content\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\n\n//Component\nfunction Input(props) {\n\t//Intializing States\n\tlet [note, setNote] = useState({ title: \"\", note: \"\" });\n\tlet [error, setError] = useState(\"\");\n\n\t//When user click on note textarea then have to expand with title and btn\n\tlet [expand, setExpand] = useState(false);\n\n\t//Returning component\n\treturn (\n\t\t<section>\n\t\t\t<div className=\"input-container\">\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\thandleSubmit(\n\t\t\t\t\t\t\tnote,\n\t\t\t\t\t\t\tsetNote,\n\t\t\t\t\t\t\tsetError,\n\t\t\t\t\t\t\tprops.handleReload,\n\t\t\t\t\t\t\te\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tstyle={error !== \"\" ? { border: \"2px solid red\" } : null}\n\t\t\t\t>\n\t\t\t\t\t{expand ? (\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\t\tvalue={note.title}\n\t\t\t\t\t\t\tonChange={(e) => handleInput(e, setNote)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tcols=\"30\"\n\t\t\t\t\t\trows=\"5\"\n\t\t\t\t\t\tname=\"note\"\n\t\t\t\t\t\tplaceholder=\"Take a note...\"\n\t\t\t\t\t\tvalue={note.note}\n\t\t\t\t\t\tonChange={(e) => handleInput(e, setNote)}\n\t\t\t\t\t\tonClick={() => setExpand(true)}\n\t\t\t\t\t/>\n\t\t\t\t\t{error ? (\n\t\t\t\t\t\t<span className=\"create-error\">\n\t\t\t\t\t\t\tNote Cannot be Empty\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t\t{expand ? (\n\t\t\t\t\t\t<Button type=\"submit\">\n\t\t\t\t\t\t\t<AddIcon />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t) : null}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\n//Export\nexport default Input;\n","//init\nimport React from \"react\";\nimport { handleDelete, handlePinned } from \"../actions\";\n\n//Material UI\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookmarkBorderOutlinedIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\nimport BookmarkOutlinedIcon from \"@material-ui/icons/BookmarkOutlined\";\n\n//Component\nfunction Cards(props) {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<>\n\t\t\t\t<div className=\"card\" id={props.id}>\n\t\t\t\t\t<h2>{props.title}</h2>\n\t\t\t\t\t<p>{props.note}</p>\n\n\t\t\t\t\t<div className=\"card-btn\">\n\t\t\t\t\t\t{/* Pin Button */}\n\t\t\t\t\t\t{props.pinned ? (\n\t\t\t\t\t\t\t<BookmarkOutlinedIcon\n\t\t\t\t\t\t\t\tclassName=\"pinned-btn\"\n\t\t\t\t\t\t\t\tstyle={{ visibility: \"visible\" }}\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\thandlePinned(props.id, props.handleReload)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<BookmarkBorderOutlinedIcon\n\t\t\t\t\t\t\t\tclassName=\"pinned-btn\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\thandlePinned(props.id, props.handleReload)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"edit-btn\"\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\tprops.handleUpdateStatus(\n\t\t\t\t\t\t\t\t\tprops.id,\n\t\t\t\t\t\t\t\t\tprops.title,\n\t\t\t\t\t\t\t\t\tprops.note\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"del-btn\"\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\thandleDelete(props.id, props.handleReload)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Cards;\n","//init\nimport React, { useState, useEffect } from \"react\";\nimport { handleInput, handleUpdate } from \"../actions\";\n\n//Material Content\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Button from \"@material-ui/core/Button\";\n\n//Component\nfunction Input(props) {\n\t//Intializing States\n\tlet [note, setNote] = useState({ title: \"\", note: \"\" });\n\tlet [error, setError] = useState(\"\");\n\n\t//this useEffect hook will track the update state in Notes.js and will assign the data to note state to show values in input tag\n\tuseEffect(() => {\n\t\tsetNote({ title: props.title, note: props.note });\n\t}, [props.update]);\n\n\t//Returning component\n\treturn (\n\t\t<section>\n\t\t\t<div className=\"input-container\">\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\thandleUpdate(\n\t\t\t\t\t\t\tprops.id,\n\t\t\t\t\t\t\tnote,\n\t\t\t\t\t\t\tsetError,\n\t\t\t\t\t\t\tprops.handleReload,\n\t\t\t\t\t\t\tprops.setUpdate,\n\t\t\t\t\t\t\te\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tstyle={error !== \"\" ? { border: \"2px solid red\" } : null}\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\tvalue={note.title}\n\t\t\t\t\t\tonChange={(e) => handleInput(e, setNote)}\n\t\t\t\t\t/>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tcols=\"30\"\n\t\t\t\t\t\trows=\"5\"\n\t\t\t\t\t\tname=\"note\"\n\t\t\t\t\t\tplaceholder=\"Take a note...\"\n\t\t\t\t\t\tvalue={note.note}\n\t\t\t\t\t\tonChange={(e) => handleInput(e, setNote)}\n\t\t\t\t\t/>\n\t\t\t\t\t{error ? (\n\t\t\t\t\t\t<span className=\"create-error\">\n\t\t\t\t\t\t\tNote Cannot be Empty\n\t\t\t\t\t\t</span>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<Button type=\"submit\">\n\t\t\t\t\t\t<AddIcon />\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</section>\n\t);\n}\n\n//Export\nexport default Input;\n","//init\nimport React, { useState, useEffect } from \"react\";\nimport { fetch } from \"../actions\";\n\n//Importing Components\nimport Nav from \"./Nav\";\nimport Input from \"./Input\";\nimport Cards from \"./Cards\";\nimport Update from \"./Update\";\n\n//Component\nfunction Notes() {\n\t//Initializing States\n\tlet [card, setCard] = useState([]); //This will get all data from db and send to card component via props\n\tlet [reload, setReload] = useState(0); //We are tracking this in useEffect hook so if this change the component will reload\n\n\t//if User click on edit we will update this state with that note's credentials\n\tlet [update, setUpdate] = useState({\n\t\tstatus: 0,\n\t\tid: \"\",\n\t\ttitle: \"\",\n\t\tnote: \"\",\n\t});\n\n\t//useEffect hook to fetch data from API via actions.js\n\tuseEffect(() => {\n\t\tfetch(setCard);\n\t}, [reload]);\n\n\t//filtering pinned and other notes\n\tlet pinned = card.filter((status) => {\n\t\treturn status.pinned === true;\n\t});\n\n\tlet others = card.filter((status) => {\n\t\treturn status.pinned === false;\n\t});\n\n\t//This function will reload the component\n\tfunction handleReload() {\n\t\tsetReload((prev) => ++prev);\n\t}\n\n\t//This onClick function on edit, This function will update the update State with that note's credentials\n\tconst handleUpdateStatus = (id, title, note) => {\n\t\t//This will set all card's display to inline block so then previouse actions set to default\n\t\tlet all = document.getElementsByClassName(\"card\");\n\t\tfor (var i = 0; i < all.length; i++) {\n\t\t\tall[i].style.display = \"inline-block\";\n\t\t}\n\n\t\t//This will set the display to none on that note that has to edit\n\t\tdocument.getElementById(id).style.display = \"none\";\n\n\t\t//Update the state with credentials\n\t\tsetUpdate((prev) => {\n\t\t\treturn {\n\t\t\t\tstatus: prev.status + 1,\n\t\t\t\tid: id,\n\t\t\t\ttitle: title,\n\t\t\t\tnote: note,\n\t\t\t};\n\t\t});\n\t};\n\n\t//Returning all components\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Nav />\n\n\t\t\t{/* We are checking if user clicked on edit then we will show Update component and by default Input component will run */}\n\t\t\t{update.status !== 0 ? (\n\t\t\t\t<Update\n\t\t\t\t\thandleReload={handleReload}\n\t\t\t\t\tid={update.id}\n\t\t\t\t\ttitle={update.title}\n\t\t\t\t\tnote={update.note}\n\t\t\t\t\tupdate={update}\n\t\t\t\t\tsetUpdate={setUpdate}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Input handleReload={handleReload} />\n\t\t\t)}\n\n\t\t\t{/* Sending data that we got from database, And it will call the function after any update to reload */}\n\n\t\t\t<div className=\"cards-container\">\n\t\t\t\t{pinned.length === 0 ? null : (\n\t\t\t\t\t<div className=\"pinned-container\">\n\t\t\t\t\t\t<p id=\"pinned-title\">PINNED</p>\n\t\t\t\t\t\t{pinned.map((data, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Cards\n\t\t\t\t\t\t\t\t\thandleReload={handleReload}\n\t\t\t\t\t\t\t\t\thandleUpdateStatus={handleUpdateStatus}\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tid={data._id}\n\t\t\t\t\t\t\t\t\ttitle={data.title}\n\t\t\t\t\t\t\t\t\tnote={data.note}\n\t\t\t\t\t\t\t\t\tpinned={data.pinned}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<p id=\"others-title\">OTHERS</p>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div className=\"Others-container\">\n\t\t\t\t\t{others.map((data, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Cards\n\t\t\t\t\t\t\t\thandleReload={handleReload}\n\t\t\t\t\t\t\t\thandleUpdateStatus={handleUpdateStatus}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tid={data._id}\n\t\t\t\t\t\t\t\ttitle={data.title}\n\t\t\t\t\t\t\t\tnote={data.note}\n\t\t\t\t\t\t\t\tpinned={data.pinned}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\n//Export\nexport default Notes;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\n//Style\nimport \"./style/App.css\";\nimport \"./style/Nav.css\";\nimport \"./style/Input.css\";\nimport \"./style/Cards.css\";\n\n//Components\nimport Notes from \"./Components/Notes\";\n\n//App Component\nfunction App() {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Notes} />\n\t\t\t<Redirect to=\"/\" />\n\t\t</Switch>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}